https://github.com/thimotyb/k8s-intro-tutorials/blob/advanced/service-mesh/istio-killrcoda-install-script.txt

https://killercoda.com/playgrounds/scenario/istio


curl -L https://istio.io/downloadIstio | sh 

https://github.com/thimotyb/k8s-intro-tutorials/blob/advanced/service-mesh/istio-killrcoda-install-script.txt -

export PATH="$PATH:/root/istio-1.16.0/bin"

istioctl install --set profile=demo -y

kubectl label namespace default istio-injection=enabled

kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

cd istio-1.16.0/

kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

kubectl edit service/productpage # Change type from ClusterIP to NodePort
kubectl get svc istio-ingressgateway -n istio-system

export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}')
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
echo "$GATEWAY_URL"

kubectl create -f samples/addons/kiali.yaml
kubectl create -f samples/addons/prometheus.yaml
kubectl create -f samples/addons/grafana.yaml
kubectl create -f samples/addons/jaeger.yaml


SENZA INGRESS GATEWAY ATTIVO:
while :; do kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"; sleep 2; done 

CON INGRESS GATEWAY ATTIVO:
while :; do curl -s $GATEWAY_URL/productpage | grep -o "<title>.*</title>"; sleep 2; done

kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml

istioctl dashboard kiali --address 0.0.0.0
istioctl dashboard grafana --address 0.0.0.0

istioctl dashboard jaeger --address 0.0.0.0

kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml


kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
EOF




kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ratings
spec:
  hosts:
  - ratings
  http:
  - fault:
      delay:
        percent: 100
        fixedDelay: 2s
    route:
    - destination:
        host: ratings
        subset: v1
EOF

kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
    timeout: 0.5s
EOF

===============================

kubectl apply -f samples/httpbin/httpbin.yaml

kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: httpbin
spec:
  host: httpbin
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 1
      http:
        http1MaxPendingRequests: 1
        maxRequestsPerConnection: 1
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 1s
      baseEjectionTime: 3m
      maxEjectionPercent: 100
EOF

kubectl apply -f samples/httpbin/sample-client/fortio-deploy.yaml

export FORTIO_POD=$(kubectl get pods -l app=fortio -o 'jsonpath={.items[0].metadata.name}')
kubectl exec "$FORTIO_POD" -c fortio -- /usr/bin/fortio curl -quiet http://httpbin:8000/get

kubectl exec "$FORTIO_POD" -c fortio -- /usr/bin/fortio load -c 2 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get

kubectl exec "$FORTIO_POD" -c fortio -- /usr/bin/fortio load -c 3 -qps 0 -n 30 -loglevel Warning http://httpbin:8000/get


======================================

MINIO E VELERO

https://velero.io/docs/main/contributions/minio/

wget https://github.com/vmware-tanzu/velero/releases/download/v1.9.3/velero-v1.9.3-linux-amd64.tar.gz
tar -xvf velero-v1.9.3-linux-amd64.tar.gz
creare un file credentials-velero

[default]
aws_access_key_id = minio
aws_secret_access_key = minio123

kubectl apply -f examples/minio/00-minio-deployment.yaml

velero install --provider aws --plugins velero/velero-plugin-for-aws:v1.2.1 --bucket velero --secret-file ./credentials-velero --use-volume-snapshots=false --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.velero.svc:9000

kubectl apply -f examples/nginx-app/base.yaml

install --provider aws --plugins velero/velero-plugin-for-aws:v1.2.1 --bucket velero --secret-file ./credentials-velero --use-volume-snapshots=false --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.velero.svc:9000

velero backup create nginx-backup --selector app=nginx
velero schedule create nginx-daily --schedule="0 1 * * *" --selector app=nginx

kubectl delete ns nginx-example
 
velero restore create --from-backup nginx-backup

velero restore get



====

CRD E OPERATORI

https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  # name must match the spec fields below, and be in the form: <plural>.<group>
  name: crontabs.stable.example.com
spec:
  # group name to use for REST API: /apis/<group>/<version>
  group: stable.example.com
  # list of versions supported by this CustomResourceDefinition
  versions:
    - name: v1
      # Each version can be enabled/disabled by Served flag.
      served: true
      # One and only one version must be marked as the storage version.
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                cronSpec:
                  type: string
                image:
                  type: string
                replicas:
                  type: integer
  # either Namespaced or Cluster
  scope: Namespaced
  names:
    # plural name to be used in the URL: /apis/<group>/<version>/<plural>
    plural: crontabs
    # singular name to be used as an alias on the CLI and for display
    singular: crontab
    # kind is normally the CamelCased singular type. Your resource manifests use this.
    kind: CronTab
    # shortNames allow shorter string to match your resource on the CLI
    shortNames:
    - ct


STRMIZI

https://strimzi.io/quickstarts/

curl https://strimzi.io/install/latest?namespace=kafka >> strimzi_install.yaml

kubectl create ns kafka
kubectl create -f strimzi_install.yaml -n kafka

https://strimzi.io/examples/latest/kafka/kafka-persistent-single.yaml

kubectl -n kafka run kafka-producer -ti --image=quay.io/strimzi/kafka:0.32.0-kafka-3.3.1 --rm=true --restart=Never -- bin/kafka-console-producer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic my-topic

kubectl -n kafka run kafka-consumer -ti --image=quay.io/strimzi/kafka:0.32.0-kafka-3.3.1 --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic my-topic --from-beginning

===============================================

https://github.com/thimotyb/EFK-minikube

kubectl get pv,pvc,statefulset,pod -n kube-logging

kubectl port-forward svc/kibana 5601 --address 0.0.0.0 -n kube-logging

===========================================

https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

helm install myprom prometheus-community/kube-prometheus-stack

kubectl --namespace default get pods -l "release=myprom"

kubectl port-forward svc/myprom-kube-prometheus-sta-prometheus 9090 --address 0.0.0.0

kubectl port-forward svc/myprom-grafana 80 --address 0.0.0.0

kubectl get secret myprom-grafana -o jsonpath="{.data.admin-password}" | base64 -d ; echo

kubectl port-forward svc/myprom-kube-prometheus-sta-alertmanager 9093 --address 0.0.0.0



===========================================

helm repo add grafana https://grafana.github.io/helm-charts
helm install my-release grafana/grafana

kubectl get secret --namespace default my-release-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=my-release" -o jsonpath="{.items[0].metadata.name}")
kubectl --namespace default port-forward $POD_NAME 3000 --address 0.0.0.0

hOM1zp3RwxvVVkrmeSYQaMnCeYw1hpWwOVe7Ooru

==============================

kubectl get secret mywp-mariadb -o json | jq -r '."data"."mariadb-password"' | base64 -d




STATEFUL SETS E MONGO DB

https://github.com/thimotyb/k8s-mongodb-stateful/tree/main/example/StatefulSet
https://kubernetes.io/docs/concepts/storage/storage-classes/
git clone https://github.com/thimotyb/k8s-mongodb-stateful


rs.initiate(
   {
      _id: "rs0",
      version: 1,
      members: [
         { _id: 0, host : "mongo-0.mongo:27017" },
         { _id: 1, host : "mongo-1.mongo:27017" },
         { _id: 2, host : "mongo-2.mongo:27017" }
      ]
   }
)

kubectl exec -ti mongo-0 -- mongosh
db.clienti.insert({"nome": "Thimoty", "cognome": "Barbieri"})
db.clienti.findOne({"cognome":"Barbieri"})

================================

STATEFUL SETS 

https://github.com/thimotyb/k8s-intro-tutorials/tree/advanced/workloads#statefulsets

https://github.com/thimotyb/k8s-intro-tutorials/tree/advanced/blue-green-deployment
git clone https://github.com/thimotyb/k8s-intro-tutorials
cd k8s-intro-tutorials/
git checkout advanced

kubectl apply -f - <<EOF

apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-sts-0
  labels:
    type: sts
spec:
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/data-sts-0"
EOF

kubectl run -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh

nslookup sts-example-0.app.default.svc.cluster.local


======================================

WORDPRESS INSTALLATION WITH KUSTOMIZE

cat <<EOF >./kustomization.yaml
secretGenerator:
- name: mysql-pass
  literals:
  - password=miapassword
EOF

curl -LO https://k8s.io/examples/application/wordpress/mysql-deployment.yaml
curl -LO https://k8s.io/examples/application/wordpress/wordpress-deployment.yaml

kubectl apply -f - <<EOF

apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-mysql
  labels:
    app: wordpress
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/data-mysql"
EOF

kubectl apply -f - <<EOF

apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-wordpress
  labels:
    app: wordpress
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/data-wp"
EOF


cat <<EOF >>./kustomization.yaml
resources:
  - mysql-deployment.yaml
  - wordpress-deployment.yaml
EOF

kubectl apply -k ./



================================

BLUE GREEN

https://github.com/thimotyb/k8s-intro-tutorials/tree/advanced/blue-green-deployment
git clone https://github.com/thimotyb/k8s-intro-tutorials
cd k8s-intro-tutorials/
git checkout advanced



=========================

CANARY

https://github.com/thimotyb/k8s-intro-tutorials/tree/advanced/canary-deployment

git clone https://github.com/thimotyb/k8s-intro-tutorials


cd k8s-intro-tutorials/


git checkout advanced


  selector:
    matchLabels:
      app: example_code
      color: red
      




=========================================

ESERCIZIO METRICHE

wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml -O metrics-server-components.yaml

- --kubelet-insecure-tls

kubectl get pods -n kube-system

kubectl apply -f https://k8s.io/examples/application/php-apache.yaml

kubectl get pods,svc -o wide

kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10

kubectl get hpa -o wide

kubectl run -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://php-apache; done"


============================

kubectl apply -f - <<EOF

apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-kafka
  labels:
    type: elasticsearch
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/data-kafka"
EOF


==========================

kubectl create deployment pippo --image=nginx
kubectl expose deployment pippo --port 80
kubectl scale deployment pippo --replicas=5

kubectl run -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://pippo; done"


==========================

https://drive.google.com/drive/folders/1Rjn6rH02cH7REL2guTzuwHYYF_-SlbtE?usp=sharing

https://drive.google.com/drive/u/0/folders/1UeIWhWEu9vL9Fmzr5MoPvlGI2ux1LebK

https://killercoda.com/

https://killercoda.com/playgrounds/scenario/kubernetes

https://github.com/kubernetes-sigs/metrics-server

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml -O metrics-server-components.yaml

- --kubelet-insecure-tls


----

kubectl apply -f https://k8s.io/examples/application/php-apache.yaml

kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10


-----

apiVersion: apps/v1

kind: Deployment

metadata:

  name: php-apache

spec:

  selector:

    matchLabels:

      run: php-apache

  replicas: 1

  template:

    metadata:

      labels:

        run: php-apache

    spec:

      containers:

      - name: php-apache

        image: registry.k8s.io/hpa-example

        ports:

        - containerPort: 80

        resources:

          limits:

            cpu: 500m

          requests:

            cpu: 200m

---

apiVersion: v1

kind: Service

metadata:

  name: php-apache

  labels:

    run: php-apache

spec:

  ports:

  - port: 80

  selector:

    run: php-apache

