curl -L https://istio.io/downloadIstio | sh -
cd istio-1.15.3
export PATH=$PWD/bin:$PATH
istioctl install --set profile=demo -y

# Set automatic injection (otherwise use manual)
kubectl label namespace default istio-injection=enabled

# Example of manual injection: (https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/)
# istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml | kubectl apply -l app=productpage,version=v1 -f -
# istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml | kubectl apply -l app!=reviews -f -
# istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml | kubectl apply -l app=reviews -f -

# start kiali, prometheus, jaeger from addons
kubectl create -f samples/addons/kiali.yaml
kubectl create -f samples/addons/prometheus.yaml
kubectl create -f samples/addons/grafana.yaml
kubectl create -f samples/addons/jaeger.yaml

kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
kubectl get services
kubectl get pods
# Wait for all running 2/2
# test it started:
kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

# Use this sleep pod as bridge to work with the cluster
kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/sleep/sleep.yaml
kubectl exec $(kubectl get pod -l app=sleep -o jsonpath='{.items[0].metadata.name}') -c sleep -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"
# Multiple times
while :; do kubectl exec $(kubectl get pod -l app=sleep -o jsonpath='{.items[0].metadata.name}') -c sleep -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"; sleep 1; done

# Grafana will be available on port 3000/grafana: browse the different dashboards for istio
istioctl dashboard grafana --address 0.0.0.0

# In killrcoda app will be open on port :30011/productpage (INGRESS PORT ON GATEWAY URL)



# Chaos Testing
# Terminate one pod, it gets restarted immediately
kubectl exec $(kubectl get pods -l app=details -o jsonpath='{.items[0].metadata.name}') -- pkill ruby

# Terminate all pods of 1 service
for pod in $(kubectl get pods -l app=details -o jsonpath='{.items[*].metadata.name}'); do echo terminating "$pod"; kubectl exec "$pod" -- pkill ruby; done
# Observe partial degradation of application

#####################

# Install istio gateway
kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
istioctl analyze

# Determine ingress nodeport
kubectl get svc istio-ingressgateway -n istio-system
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}')
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
echo "$GATEWAY_URL"

kubectl get deploy -o wide -n istio-system
kubectl get svc -o wide -n istio-system

# Create some traffic (in a separate tab)
while :; do curl -s $GATEWAY_URL/productpage | grep -o "<title>.*</title>"; sleep 1; done

# Apply destination rules
kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/bookinfo/networking/destination-rule-all.yaml

# Kiali will be available on port 20001/kiali
istioctl dashboard kiali --address 0.0.0.0

# From here all "Tasks" exercises can be performed, e.g.
# https://istio.io/latest/docs/tasks/traffic-management/traffic-shifting/
